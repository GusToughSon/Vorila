/*		PACKET_LOGIN Newpacket;
		memset(&Newpacket, 0, sizeof(Newpacket));
		recv(Clients[Player].ClientSocket, buffer, sizeof( Newpacket ), 0);
		memcpy(&Newpacket, buffer, sizeof( Newpacket ));
		if (strlen(Newpacket.LoginName) > 19 ) break;
		printf("%s: [Account creation] [IP]: %s [Account name]: %s [Account pass]: %s\n", Time, ClientIp, Newpacket.LoginName, Newpacket.LoginPass);
		if (Newpacket.Version < _VERSION)
		{
			printf("%s: [Error] at [Login] -> Client has wrong version.\n", Time);
			acccreation << Time << "[Account creation][FAILED]::[IP]: " << ClientIp << " [Account name]: " << Newpacket.LoginName << " [Account pass]: " << Newpacket.LoginPass << endl;
			buffer[0] = 1;
			buffer[1] = 2;
			send(Clients[Player].ClientSocket, buffer, 2, 0);
			Disconnect( Player );
			break;
		}
		bool IsAcc;
		IsAcc = false;
//		IsAcc = accountExist( Newpacket.LoginName);
		if (AccountExists(Newpacket.LoginName))
			IsAcc = true;
		if (IsAcc) 
		{
			printf("Account already exists.\n");
			buffer[0] = 1;
			buffer[1] = 10;
			send(Clients[Player].ClientSocket, buffer, 2, 0);
		}
		if (!IsAcc)
		{
			// Failed to locate existing account, let's create this one.

			bool errori;
			errori = false;

			for (i = 0; i < 50; i++)
			{
				if (!strcmp(ClientIp, LastAccountCreates[i]))
				{
					errori = true;
					i = 50;
				}			
			}

			if (errori)
			{
				printf("Blocked account creation from IP %s, because it has recently created an account\n", ClientIp);
				Disconnect( Player);
				break;
			}

			acccreation << Time << "[Account creation][SUCCEED]::[IP]: " << ClientIp << " [Account name]: " << Newpacket.LoginName << " [Account pass]: " << Newpacket.LoginPass << "[Account file]: accounts\\" << Newpacket.LoginName << ".acc" << endl;

			short NewID;
			NewID = GetFreeAccountID();

            if (NewID == -1) break;

			memset(&Accounts[NewID], 0, sizeof(Accounts[NewID]));

			strcpy(Accounts[NewID].AccName, Newpacket.LoginName);
			strcpy(Accounts[NewID].AccPass, Newpacket.LoginPass);

			Clients[Player].AccountID = NewID;

			Accounts[NewID].AccState = 0;
			Accounts[NewID].ID = GetFreeStaticAccountID();
			Accounts[NewID].InUse = true;
			Accounts[NewID].LoggedInID = Player;

			buffer[0] = 1;
			buffer[1] = 9;				
			send(Clients[Player].ClientSocket, buffer, 2, 0);

			for(i = 1; i < 49; i++)
			{
				strcpy(LastAccountCreates[i+1], LastAccountCreates[i]);
			}
			strcpy(LastAccountCreates[0], ClientIp);
		}*/
