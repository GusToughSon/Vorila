		memset(&Newpacket, 0, sizeof(Newpacket));

		if (Clients[Player].State != 5) break;

		recv(Clients[Player].ClientSocket, buffer, sizeof( Newpacket ), 0);

		memcpy(&Newpacket, buffer, sizeof( Newpacket ));

		printf("%s: LOGIN[IP]: %s [Account name]: %s [Account pass]: %s\n", Time, ClientIp, Newpacket.LoginName, Newpacket.LoginPass);

		login << Date << " " << Time << " [IP]: " << ClientIp << " [Account name]: " << Newpacket.LoginName << " [Account pass]: " << Newpacket.LoginPass << "[Account file]: accounts\"" << Newpacket.LoginName << ".acc\"" << endl;

		if (Newpacket.Version < _VERSION)
		{
			printf("%s: [Error] at [Login] -> Client has wrong version.\n", Time);

			buffer[0] = 1;
			buffer[1] = 2;
			send(Clients[Player].ClientSocket, buffer, 2, 0);

			Disconnect( Player );

			break;
		}

		Clients[Player].Version = Newpacket.Version;
		
		IsAcc = false;

		short ID;
		ID = AccountByName(Newpacket.LoginName);


		if (ID != -1)
			IsAcc = true;

		if (!IsAcc)
		{
			// Failed to locate this account, informing client.
			flogin << Date << " " <<  Time << " [IP]: " << ClientIp << " [Reason] -> Account \"" << Newpacket.LoginName << "\" doesn't exist." << Newpacket.LoginName << endl;
			
			printf("%s: [Error] at [Login] -> Account doesn't exist.\n", Time);

			buffer[0] = 1;
			buffer[1] = 4;
			send(Clients[Player].ClientSocket, buffer, 2, 0);
            
			Disconnect (Player);

			break;
		}

		Clients[Player].AccountID = ID;

		if (IsAccountAlreadyInUse(Accounts[ Clients[Player].AccountID ].ID))
		{
			// Account already in use.
            
			flogin << Date << " " << Time << " [IP]: " << ClientIp << " [Reason] -> Account \"" << Newpacket.LoginName << ".acc\" is already logged in." << endl;

			printf("%s: [Error] at [Login] -> Account is already in use.\n", Time);

			buffer[0] = 1;
			buffer[1] = 7;
			send(Clients[Player].ClientSocket, buffer, 2, 0);
			Disconnect (Player);
			break;
		}
		else
		{
			// Account loaded successfully, send first packet to client if password is correct.
	
			if (strcmp(Accounts[Clients[Player].AccountID].AccPass, Newpacket.LoginPass))
			{				
				// Password was wrong.
	
				flogin << Date << " " << Time << " [IP]: " << ClientIp << " Loading account \"" << Newpacket.LoginName << "\" failed, user gave wrong password." << endl;

				printf("%s: [Error] at [Login] -> Wrong password.\n", Time);

				buffer[0] = 1;
				buffer[1] = 5;								
				send(Clients[Player].ClientSocket, buffer, 2, 0);
            
				Disconnect (Player);
	
				break;
			}


			if (Accounts[Clients[Player].AccountID].IsBanned)
			{
				printf("Blocked login for banned account\n");
				buffer[0] = 1;
				buffer[1] = 6;
				send(Clients[Player].ClientSocket, buffer, 2, 0);

				Disconnect(Player);
				break;
			}
			login << Date << " " << Time << " Account \"" << Newpacket.LoginName << ".acc\" successfully loaded." << endl;

			// Load character's guild info here.

			Accounts[Clients[Player].AccountID].InUse = true;
			Accounts[Clients[Player].AccountID].LoggedInID = Player;
			

			PACKET_CHARCHOOSE Newpacket;
	
			memset(&Newpacket, 0, sizeof(Newpacket));

			if (Accounts[Clients[Player].AccountID].Char[0].Used == 1)
			{
				Newpacket.Avatar[0] = Accounts[Clients[Player].AccountID].Char[0].Avatar;
				Newpacket.HPLeft[0] = Accounts[Clients[Player].AccountID].Char[0].HPLeft;
				Newpacket.HPMax[0] = Accounts[Clients[Player].AccountID].Char[0].HPMax;
				Newpacket.IsInGuild[0] = Accounts[Clients[Player].AccountID].Char[0].IsInGuild;

				Newpacket.Level[0] = Accounts[Clients[Player].AccountID].Char[0].Level;
				Newpacket.Reputation[0] = Accounts[Clients[Player].AccountID].Char[0].Reputation;
				Newpacket.Wanted[0] = Accounts[Clients[Player].AccountID].Char[0].Wanted;

				Newpacket.Used[0] = 1;

				strcpy(Newpacket.Name[0], Accounts[Clients[Player].AccountID].Char[0].Name);
				strcpy(Newpacket.Tag[0], Accounts[Clients[Player].AccountID].Char[0].Tag);
			}

			if (Accounts[Clients[Player].AccountID].Char[1].Used == 1)
			{
				Newpacket.Avatar[1] = Accounts[Clients[Player].AccountID].Char[1].Avatar;
				Newpacket.HPLeft[1] = Accounts[Clients[Player].AccountID].Char[1].HPLeft;
				Newpacket.HPMax[1] = Accounts[Clients[Player].AccountID].Char[1].HPMax;
				Newpacket.IsInGuild[1] = Accounts[Clients[Player].AccountID].Char[1].IsInGuild;
	
				Newpacket.Level[1] = Accounts[Clients[Player].AccountID].Char[1].Level;
				Newpacket.Reputation[1] = Accounts[Clients[Player].AccountID].Char[1].Reputation;
				Newpacket.Wanted[1] = Accounts[Clients[Player].AccountID].Char[1].Wanted;
	
				Newpacket.Used[1] = 1;
					
				strcpy(Newpacket.Name[1], Accounts[Clients[Player].AccountID].Char[1].Name);
				strcpy(Newpacket.Tag[1], Accounts[Clients[Player].AccountID].Char[1].Tag);
			}
	
			buffer[0] = 1;
			buffer[1] = 3;
			memcpy(&buffer[2], &Newpacket, sizeof(Newpacket));

			Clients[Player].State = 5; 
	
			send(Clients[Player].ClientSocket, buffer, 2 + sizeof(Newpacket), 0);
			

			break;
		}
